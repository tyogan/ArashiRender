#version 330 core

in vec3 fWorldPos;
in vec3 fWorldNormal;
in vec2 fTexCoords;

out vec4 FragColor;

layout (std140) uniform MainLightBlock
{
	vec4 mainLightDir[8];
	vec4 mainLightColor[8];
};
uniform mat4 mainLightVP[8];
uniform sampler2DArray MainShadowMap;
uniform int mainLightNums;

layout (std140) uniform EnvmapLightBlock
{
	vec4 envmapLightDir[128];
	vec4 envmapLightColor[128];
};
uniform mat4 envmapLightVP[128];
uniform sampler2DArray EnvShadowMap;
uniform int envmapLightNums;

uniform vec3 objectColor;

void shadowMainLight()
{
	float visibility=1.f;
	
	for(int i=0;i<mainLightNums;i++)
	{
		vec4 lightCoord=mainLightVP[i]*vec4(fWorldPos,1.f);
		vec3 shadowCoord=lightCoord.xyz/vec3(lightCoord.w);
		float sampleZ=texture(ShadowMap,vec3(shadowCoord.xy,i)).z;
		if(sampleZ<shadowCoord.z)
		{
			visibility-=0.1;
		}
	}
}

void main()
{	
	vec3 l=normalize(lightDir);
	vec3 n=normalize(worldNormal);
	vec3 diffuse=dot(l,n)*lightColor;

	vec3 env=vec3(0.f);
	for(int i=0;i<envmapLightNums;i++)
	{
		l=normalize(envmapLightDir[i].xyz);
		env+=max(dot(l,n),0)*envmapLightColor[i].xyz;
	}

	vec3 res=(diffuse+env)*objectColor;

	FragColor=vec4(pow(res,vec3(1/2.2)),1);
}