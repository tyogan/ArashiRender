#version 330 core
out vec4 FragColor;
//
//layout(std140) uniform lightBlock
//{
//	vec4 lightDir[64];
//	vec4 lightColor[64];
//	mat4 lightTrans[64];
//};
//
//uniform vec3 viewPos;
//
//uniform sampler2DArray shadowmap;
//
//in VS_OUT {
//    vec3 FragPos;
//    vec3 Normal;
//} fs_in;
//
//float ShadowCalculation(vec4 fragPosLightSpace,int idx)
//{
//	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
//	projCoords = projCoords * 0.5 + 0.5;
//	float closestDepth = texture(shadowmap, vec3(projCoords.xy,idx)).r;
//	float currentDepth = projCoords.z;
//	float bias = max(0.05 * (1.0 - dot(normalize(fs_in.Normal), normalize(lightBlock.lightDir[0].xyz))), 0.005);
//	float shadow = 0.0;
//	vec2 texelSize = vec2(1.0 / 1024.0);
//	for(int x = -1; x <= 1; ++x)
//	{
//		for(int y = -1; y <= 1; ++y)
//		{
//			float pcfDepth = texture(shadowmap, vec3(projCoords.xy + vec2(x, y) * texelSize,idx)).r; 
//			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
//		}    
//	}
//	shadow /= 9.0;
//	if(projCoords.z > 1.0)
//        shadow = 0.0;
//	return shadow;
//}
//
//vec3 lightSH()
//{
//	vec3 color = vec3(1.0);
//	return color;
//}
//
//vec3 lightIBL()
//{
//	vec3 color = vec3(1.0);
//	return color;
//}
//
//void main()
//{	
//	vec3 objectColor=vec3(1.0);
//
//	vec3 norm=normalize(fs_in.Normal);
//	vec3 result=vec3(0.0);
//	for(int i=0;i<64;i++)
//	{
//		vec3 lightDirN=normalize(lightBlock.lightDir[i].xyz);
//		vec4 FragPosLightSpace=lightBlock.lightTrans[i]*vec4(fs_in.FragPos,1.0);
//		float shadow=ShadowCalculation(FragPosLightSpace,i);
//		
//		vec3 lightColor=vec3(0);
//		if(i<1)
//		{
//			lightColor=lightBlock.lightColor[i].rgb*(1.0-shadow);
//		}else{
//			lightColor=lightBlock.lightColor[i].rgb;
//		}
//		
//
//		vec3 diffuse = lightColor*max(dot(norm, lightDirN), 0.0)*objectColor;
//
//		//vec3 viewDir=normalize(viewPos-fs_in.FragPos);
//		//vec3 reflectDir = reflect(-lightDirN, norm);
//		//vec3 halfNormal = normalize(-lightDirN+viewDir);
//		//float spec = pow(max(dot(halfNormal, norm), 0.0), 32);
//
//		result+=diffuse;
//	}
//	result=pow(result,vec3(1/2.2));
//	FragColor=vec4(result,1);
//}

void main()
{
	FragColor=vec4(1,1,0,1);
}